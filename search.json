[{"path":"https://sckott.github.io/mutant/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant (https://contributor-covenant.org), version 1.0.0, available https://contributor-covenant.org/version/1/0/0/","code":""},{"path":"https://sckott.github.io/mutant/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Scott Chamberlain. Author, maintainer.","code":""},{"path":"https://sckott.github.io/mutant/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Chamberlain S (2024). mutant: Mutation Testing Framework. R package version 0.0.2.94, https://github.com/sckott/mutant, https://sckott.github.io/mutant/.","code":"@Manual{,   title = {mutant: Mutation Testing Framework},   author = {Scott Chamberlain},   year = {2024},   note = {R package version 0.0.2.94, https://github.com/sckott/mutant},   url = {https://sckott.github.io/mutant/}, }"},{"path":"https://sckott.github.io/mutant/index.html","id":"mutant","dir":"","previous_headings":"","what":"Mutation Testing Framework","title":"Mutation Testing Framework","text":"mutant - mutation testing (wikipedia: mutation testing vs. fuzzing)","code":""},{"path":"https://sckott.github.io/mutant/index.html","id":"info","dir":"","previous_headings":"","what":"info","title":"Mutation Testing Framework","text":"boolean replacement (TRUE -> FALSE, vice versa) binary operator replacement (e.g., > >=)","code":""},{"path":"https://sckott.github.io/mutant/index.html","id":"install","dir":"","previous_headings":"","what":"install","title":"Mutation Testing Framework","text":"","code":"remotes::install_github(\"sckott/astr\", \"sckott/mutant\")"},{"path":"https://sckott.github.io/mutant/index.html","id":"current-workflow","dir":"","previous_headings":"","what":"current workflow","title":"Mutation Testing Framework","text":"writing (2020-05-18) … internal code however - exposing probably functions users run mutation testing, something results, etc.","code":"# path to an R package with working tests in tests/ path <- \"../randgeo/\" ## collect fxns into an environment env <- collect_fxns(path) ls.str(env) ## make pkg map for later pkgmap <- make_pkg_map(path) ## parse fxns with getParseData # fxns <- parse_fxns(env) ## mutate something mut_fxns <- mutate(as.list(env)) # what fxn was mutated? which(vapply(mut_fxns, function(x) attr(x, \"mutated\"), logical(1))) ## write a new package with test suite to a tempdir new_fxns <- make_fxns(mut_fxns) newpath <- write_mutated_pkg(pkg_path = path, fxns = new_fxns, map = pkgmap) ## run test suite & collect diagnostics mutout <- mutation_test(newpath) # mutout dplyr::select(data.frame(mutout), file, context, test, nb, failed, skipped, error, warning, passed)"},{"path":"https://sckott.github.io/mutant/index.html","id":"to-do","dir":"","previous_headings":"","what":"To do","title":"Mutation Testing Framework","text":"brainstorming high level steps: optionally map test lines linked code lines (#10) full packages, different mutation put mutants queue (#2) test mutants - pull jobs queue done collate results, write disk","code":""},{"path":"https://sckott.github.io/mutant/index.html","id":"meta","dir":"","previous_headings":"","what":"Meta","title":"Mutation Testing Framework","text":"Please report issues bugs. License: MIT Get citation information mutant R citation(package = 'mutant') Please note project released Contributor Code Conduct. participating project agree abide terms.","code":""},{"path":"https://sckott.github.io/mutant/reference/collect_fxns.html","id":null,"dir":"Reference","previous_headings":"","what":"Collect functions into an environment — collect_fxns","title":"Collect functions into an environment — collect_fxns","text":"Collect functions environment","code":""},{"path":"https://sckott.github.io/mutant/reference/collect_fxns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collect functions into an environment — collect_fxns","text":"","code":"collect_fxns(path)"},{"path":"https://sckott.github.io/mutant/reference/collect_fxns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collect functions into an environment — collect_fxns","text":"path (character) path package, default: current directory","code":""},{"path":"https://sckott.github.io/mutant/reference/collect_fxns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collect functions into an environment — collect_fxns","text":"enironment functions environment","code":""},{"path":"https://sckott.github.io/mutant/reference/make_fxn.html","id":null,"dir":"Reference","previous_headings":"","what":"Make functions from utils::getParseData() output — make_fxn","title":"Make functions from utils::getParseData() output — make_fxn","text":"Make functions utils::getParseData() output","code":""},{"path":"https://sckott.github.io/mutant/reference/make_fxn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make functions from utils::getParseData() output — make_fxn","text":"","code":"make_fxn(x)  make_fxns(x)"},{"path":"https://sckott.github.io/mutant/reference/make_fxn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make functions from utils::getParseData() output — make_fxn","text":"x make_fxn, data.frame, output utils::getParseData(); make_fxns, list ","code":""},{"path":"https://sckott.github.io/mutant/reference/make_fxn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make functions from utils::getParseData() output — make_fxn","text":"make_fxn function character string; make_fxns, list ","code":""},{"path":"https://sckott.github.io/mutant/reference/make_fxn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make functions from utils::getParseData() output — make_fxn","text":"","code":"if (FALSE) { # \\dontrun{ foo <- function(x) {   if (x == 1) x else 5 } foo f <- mutate_one(foo) f x = f make_fxn(f)  bar <- function(w) {   if (w == 10) w else 5 } g <- mutate_one(bar) make_fxns(list(f, g)) } # }"},{"path":"https://sckott.github.io/mutant/reference/make_pkg_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a package map — make_pkg_map","title":"Make a package map — make_pkg_map","text":"Using pkgapi::map_package()","code":""},{"path":"https://sckott.github.io/mutant/reference/make_pkg_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a package map — make_pkg_map","text":"","code":"make_pkg_map(path = \".\")"},{"path":"https://sckott.github.io/mutant/reference/make_pkg_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a package map — make_pkg_map","text":"path (character) path package, default: current directory","code":""},{"path":"https://sckott.github.io/mutant/reference/make_pkg_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a package map — make_pkg_map","text":"output pkgapi::map_package(); thin wrapper around fxn","code":""},{"path":"https://sckott.github.io/mutant/reference/mutant-package.html","id":null,"dir":"Reference","previous_headings":"","what":"mutant: Mutation Testing Framework — mutant-package","title":"mutant: Mutation Testing Framework — mutant-package","text":"Mutation testing framework.","code":""},{"path":[]},{"path":"https://sckott.github.io/mutant/reference/mutant-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"mutant: Mutation Testing Framework — mutant-package","text":"Maintainer: Scott Chamberlain myrmecocystus@gmail.com (ORCID)","code":""},{"path":"https://sckott.github.io/mutant/reference/mutate.html","id":null,"dir":"Reference","previous_headings":"","what":"Make mutations across many functions — mutate","title":"Make mutations across many functions — mutate","text":"Goal input many functions make one mutation one functions better isolate effect mutation. See Details.","code":""},{"path":"https://sckott.github.io/mutant/reference/mutate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make mutations across many functions — mutate","text":"","code":"mutate(x)"},{"path":"https://sckott.github.io/mutant/reference/mutate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make mutations across many functions — mutate","text":"x list output parse_fxns()","code":""},{"path":"https://sckott.github.io/mutant/reference/mutate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make mutations across many functions — mutate","text":"list ","code":""},{"path":"https://sckott.github.io/mutant/reference/mutate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make mutations across many functions — mutate","text":"use loop internally; attempt mutate function make successful mutation, return complete set functions one function one mutation","code":""},{"path":"https://sckott.github.io/mutant/reference/mutate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make mutations across many functions — mutate","text":"","code":"if (FALSE) { # \\dontrun{ foo <- function(x) {   if (x == 1) x else 5 } bar <- function(w) {   if (w == 10) w else 5 } mutate(list(foo, bar)) } # }"},{"path":"https://sckott.github.io/mutant/reference/mutate_one.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a mutation in one function — mutate_one","title":"Make a mutation in one function — mutate_one","text":"Make mutation one function","code":""},{"path":"https://sckott.github.io/mutant/reference/mutate_one.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a mutation in one function — mutate_one","text":"","code":"mutate_one(x)  # Default S3 method mutate_one(x)  # S3 method for class '`function`' mutate_one(x)  # S3 method for class 'ast' mutate_one(x)"},{"path":"https://sckott.github.io/mutant/reference/mutate_one.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a mutation in one function — mutate_one","text":"x data.frame, output utils::getParseData(), called parse_fxns()","code":""},{"path":"https://sckott.github.io/mutant/reference/mutate_one.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a mutation in one function — mutate_one","text":"data.frame x, single mutation","code":""},{"path":"https://sckott.github.io/mutant/reference/mutate_one.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Make a mutation in one function — mutate_one","text":"uses astr::ast_modify() internally","code":""},{"path":"https://sckott.github.io/mutant/reference/mutate_one.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a mutation in one function — mutate_one","text":"","code":"if (FALSE) { # \\dontrun{ foo <- function(x) {   if (x == 1) x else 5 } mutate_one(foo) mutate_one(astr::ast_decompose(foo)) } # }"},{"path":"https://sckott.github.io/mutant/reference/mutaters.html","id":null,"dir":"Reference","previous_headings":"","what":"mutaters — mutaters","title":"mutaters — mutaters","text":"R6 class handling various mutaters","code":""},{"path":"https://sckott.github.io/mutant/reference/mutaters.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"mutaters — mutaters","text":"muts (list) list mutaters","code":""},{"path":[]},{"path":"https://sckott.github.io/mutant/reference/mutaters.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"mutaters — mutaters","text":"mutaters$print() mutaters$new() mutaters$random() mutaters$clone()","code":""},{"path":"https://sckott.github.io/mutant/reference/mutaters.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"mutaters — mutaters","text":"print method mutaters objects","code":""},{"path":"https://sckott.github.io/mutant/reference/mutaters.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"mutaters — mutaters","text":"","code":"mutaters$print(x, ...)"},{"path":"https://sckott.github.io/mutant/reference/mutaters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"mutaters — mutaters","text":"x self ... ignored","code":""},{"path":"https://sckott.github.io/mutant/reference/mutaters.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"mutaters — mutaters","text":"Create new mutaters object","code":""},{"path":"https://sckott.github.io/mutant/reference/mutaters.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"mutaters — mutaters","text":"","code":"mutaters$new()"},{"path":"https://sckott.github.io/mutant/reference/mutaters.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"mutaters — mutaters","text":"new mutaters object","code":""},{"path":"https://sckott.github.io/mutant/reference/mutaters.html","id":"method-random-","dir":"Reference","previous_headings":"","what":"Method random()","title":"mutaters — mutaters","text":"randomly select mutater","code":""},{"path":"https://sckott.github.io/mutant/reference/mutaters.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"mutaters — mutaters","text":"","code":"mutaters$random()"},{"path":"https://sckott.github.io/mutant/reference/mutaters.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"mutaters — mutaters","text":"objects class cloneable method.","code":""},{"path":"https://sckott.github.io/mutant/reference/mutaters.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"mutaters — mutaters","text":"","code":"mutaters$clone(deep = FALSE)"},{"path":"https://sckott.github.io/mutant/reference/mutaters.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"mutaters — mutaters","text":"deep Whether make deep clone.","code":""},{"path":"https://sckott.github.io/mutant/reference/mutaters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"mutaters — mutaters","text":"","code":"if (FALSE) { # \\dontrun{ x <- mutaters$new() x # select mutater by name x$muts$bool_false2true # fetch a random mutater z <- x$random() z z$name z$description z$from z$to } # }"},{"path":"https://sckott.github.io/mutant/reference/mutation_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Mutation test — mutation_test","title":"Mutation test — mutation_test","text":"Run testthat::test_dir() mutated package","code":""},{"path":"https://sckott.github.io/mutant/reference/mutation_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mutation test — mutation_test","text":"","code":"mutation_test(x)"},{"path":"https://sckott.github.io/mutant/reference/mutation_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mutation test — mutation_test","text":"x (character) complete path package","code":""},{"path":"https://sckott.github.io/mutant/reference/mutation_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mutation test — mutation_test","text":"output testthat::SilentReporter","code":""},{"path":"https://sckott.github.io/mutant/reference/parse_fxns.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse functions — parse_fxns","title":"Parse functions — parse_fxns","text":"Parse functions","code":""},{"path":"https://sckott.github.io/mutant/reference/parse_fxns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse functions — parse_fxns","text":"","code":"parse_fxns(env)"},{"path":"https://sckott.github.io/mutant/reference/parse_fxns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse functions — parse_fxns","text":"env environment functions","code":""},{"path":"https://sckott.github.io/mutant/reference/parse_fxns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse functions — parse_fxns","text":"list data.frame's, output utils::getParseData(); names list function names","code":""},{"path":"https://sckott.github.io/mutant/reference/parse_fxns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse functions — parse_fxns","text":"","code":"if (FALSE) { # \\dontrun{ path <- \"../randgeo/\" env <- collect_fxns(path) parse_fxns(env) } # }"},{"path":"https://sckott.github.io/mutant/reference/queue.html","id":null,"dir":"Reference","previous_headings":"","what":"mutant queue — queue","title":"mutant queue — queue","text":"queue R6 class, queueing mutant jobs","code":""},{"path":"https://sckott.github.io/mutant/reference/queue.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"mutant queue — queue","text":"q (liteq_queue) liteq queue object qpath (character) path queue disk","code":""},{"path":[]},{"path":"https://sckott.github.io/mutant/reference/queue.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"mutant queue — queue","text":"queue$print() queue$new() queue$publish() queue$consume() queue$done() queue$messages() queue$count() queue$queue_path() queue$destroy() queue$clone()","code":""},{"path":"https://sckott.github.io/mutant/reference/queue.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"mutant queue — queue","text":"print method queue objects","code":""},{"path":"https://sckott.github.io/mutant/reference/queue.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"mutant queue — queue","text":"","code":"queue$print(x, ...)"},{"path":"https://sckott.github.io/mutant/reference/queue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"mutant queue — queue","text":"x self ... ignored","code":""},{"path":"https://sckott.github.io/mutant/reference/queue.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"mutant queue — queue","text":"Create new queue object","code":""},{"path":"https://sckott.github.io/mutant/reference/queue.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"mutant queue — queue","text":"","code":"queue$new(temporary = TRUE)"},{"path":"https://sckott.github.io/mutant/reference/queue.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"mutant queue — queue","text":"temporary (logical) create temporary queue cleaned end R session? default: TRUE. FALSE, use rappdirs::user_data_dir() cache file. use $queue_path() get path queue","code":""},{"path":"https://sckott.github.io/mutant/reference/queue.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"mutant queue — queue","text":"new queue object","code":""},{"path":"https://sckott.github.io/mutant/reference/queue.html","id":"method-publish-","dir":"Reference","previous_headings":"","what":"Method publish()","title":"mutant queue — queue","text":"publish job queue","code":""},{"path":"https://sckott.github.io/mutant/reference/queue.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"mutant queue — queue","text":"","code":"queue$publish(message, title = uuid::UUIDgenerate())"},{"path":"https://sckott.github.io/mutant/reference/queue.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"mutant queue — queue","text":"message (character) job message, JSON string fields path mutant_location, file path mutated package test information location mutation, respectively title (character) job title, UUID, generated uuid::UUIDgenerate()","code":""},{"path":"https://sckott.github.io/mutant/reference/queue.html","id":"method-consume-","dir":"Reference","previous_headings":"","what":"Method consume()","title":"mutant queue — queue","text":"consume job queue","code":""},{"path":"https://sckott.github.io/mutant/reference/queue.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"mutant queue — queue","text":"","code":"queue$consume()"},{"path":"https://sckott.github.io/mutant/reference/queue.html","id":"method-done-","dir":"Reference","previous_headings":"","what":"Method done()","title":"mutant queue — queue","text":"tell queue job can removed queue","code":""},{"path":"https://sckott.github.io/mutant/reference/queue.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"mutant queue — queue","text":"","code":"queue$done(message)"},{"path":"https://sckott.github.io/mutant/reference/queue.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"mutant queue — queue","text":"message (character) message object, class liteq_message","code":""},{"path":"https://sckott.github.io/mutant/reference/queue.html","id":"method-messages-","dir":"Reference","previous_headings":"","what":"Method messages()","title":"mutant queue — queue","text":"list jobs queue","code":""},{"path":"https://sckott.github.io/mutant/reference/queue.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"mutant queue — queue","text":"","code":"queue$messages()"},{"path":"https://sckott.github.io/mutant/reference/queue.html","id":"method-count-","dir":"Reference","previous_headings":"","what":"Method count()","title":"mutant queue — queue","text":"count jobs queue","code":""},{"path":"https://sckott.github.io/mutant/reference/queue.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"mutant queue — queue","text":"","code":"queue$count()"},{"path":"https://sckott.github.io/mutant/reference/queue.html","id":"method-queue-path-","dir":"Reference","previous_headings":"","what":"Method queue_path()","title":"mutant queue — queue","text":"fetch queue path. NULL queue","code":""},{"path":"https://sckott.github.io/mutant/reference/queue.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"mutant queue — queue","text":"","code":"queue$queue_path()"},{"path":"https://sckott.github.io/mutant/reference/queue.html","id":"method-destroy-","dir":"Reference","previous_headings":"","what":"Method destroy()","title":"mutant queue — queue","text":"destroy queue - practice means deleting SQLite file","code":""},{"path":"https://sckott.github.io/mutant/reference/queue.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"mutant queue — queue","text":"","code":"queue$destroy()"},{"path":"https://sckott.github.io/mutant/reference/queue.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"mutant queue — queue","text":"objects class cloneable method.","code":""},{"path":"https://sckott.github.io/mutant/reference/queue.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"mutant queue — queue","text":"","code":"queue$clone(deep = FALSE)"},{"path":"https://sckott.github.io/mutant/reference/queue.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"mutant queue — queue","text":"deep Whether make deep clone.","code":""},{"path":"https://sckott.github.io/mutant/reference/queue.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"mutant queue — queue","text":"","code":"if (FALSE) { # \\dontrun{ x <- queue$new() x x$q x$queue_path() x$messages() z <- list(   path = tempfile(),    mutant_location = list(     `some-file.R` =        list(line1 = 45, line2 = 46, column = 4, from = \"==\", to = \">\"))) x$publish(as.character(jsonlite::toJSON(z))) x x$messages() mssg <- x$consume() mssg mssg$title mssg$message jsonlite::fromJSON(mssg$message) x$messages() x$done(mssg) x$messages() x } # }"},{"path":"https://sckott.github.io/mutant/reference/run_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Run tests a single time — run_test","title":"Run tests a single time — run_test","text":"Run tests single time","code":""},{"path":"https://sckott.github.io/mutant/reference/run_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run tests a single time — run_test","text":"","code":"run_test(map)  run_tests(map, n = 1)"},{"path":"https://sckott.github.io/mutant/reference/run_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run tests a single time — run_test","text":"map function map returned make_pkg_map() n (integer) number times run tests","code":""},{"path":"https://sckott.github.io/mutant/reference/run_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run tests a single time — run_test","text":"object class testthat_results","code":""},{"path":"https://sckott.github.io/mutant/reference/run_test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run tests a single time — run_test","text":"uses testthat::SilentReporter reporter testthat::test_package()","code":""},{"path":"https://sckott.github.io/mutant/reference/run_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run tests a single time — run_test","text":"","code":"if (FALSE) { # \\dontrun{ path <- '/Users/sckott/github/ropensci/rredlist' pkgmap <- make_pkg_map(path)  # single test res <- run_test(pkgmap) class(res) res[[1]]  # many tests out <- run_tests(pkgmap, times = 2) length(out) out[[1]] out[[2]] } # }"},{"path":"https://sckott.github.io/mutant/reference/write_mutated_pkg.html","id":null,"dir":"Reference","previous_headings":"","what":"Write mutated package — write_mutated_pkg","title":"Write mutated package — write_mutated_pkg","text":"Write mutated package","code":""},{"path":"https://sckott.github.io/mutant/reference/write_mutated_pkg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write mutated package — write_mutated_pkg","text":"","code":"write_mutated_pkg(pkg_path, fxns, map)"},{"path":"https://sckott.github.io/mutant/reference/write_mutated_pkg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write mutated package — write_mutated_pkg","text":"pkg_path (character) path original package. overwrite files original path/location fxns (list) list functions, output make_fxns() map (list) package map, output make_pkg_map()","code":""}]
